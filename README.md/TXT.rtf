{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red10\green77\blue204;
\red244\green246\blue249;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c1176\c40000\c83922;
\cssrgb\c96471\c97255\c98039;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww22960\viewh13920\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs64 \cf2 \cb3 \expnd0\expndtw0\kerning0
GlucometerBluetoothToHealthKit\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 This code is provided purely for educational purposes. It is not warranted to use in any commercial product nor in any medical application. User is free to download, use and modify and does so entirely at their own risk.\cb1 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://camo.githubusercontent.com/a4135c4e75039c534872f224fe9589d3a393374c/68747470733a2f2f692e706f7374696d672e63632f72774335575771362f70726f6a6563742d6c6f676f732e706e67"}}{\fldrslt \cf4 \cb3 {{\NeXTGraphic 68747470733a2f2f692e706f7374696d672e63632f72774335575771362f70726f6a6563742d6c6f676f732e706e67.png \width19920 \height5800 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}}}\pard\pardeftab720\partightenfactor0
\cf2 \
\cb3 While newer blood glucose monitors (BGM) have Bluetooth capability (BLE), they are often designed only to sync data to their own cloud. However many applications call for mixing glucose measurements with data like weight, activity, carb consumption from other apps to enable consumers themselves, coaching, or care teams to use the information directly.\cb1 \
\cb3 This code pulls glucose measurements from BLE-enabled BGM and stores it both in:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
HealthKit. Many apps and EHRs have HealthKit integration and can use HK as a channel to import glucose data.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Open format. Developer can integrate into other database systems.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The code was developed using a Contour Next One BGM since it was found in {\field{\*\fldinst{HYPERLINK "http://care.diabetesjournals.org/content/early/2018/05/25/dc17-1960.article-info"}}{\fldrslt \cf4 a study published by the American Diabetes Association}} to be the most accurate of the set of 18 BGMs tested and in fact one of the few to meet the FDA accuracy standard for glucometers.\cb1 \
\cb3 The Bluetooth Forum developed a standard \'93GATT\'94 profile for BGMs. Details can be found {\field{\*\fldinst{HYPERLINK "https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.glucose_measurement.xml"}}{\fldrslt \cf4 here}}\cb1 \
\cb3 This spec is not particularly self-explanatory; I hope that this code helps fill in the detail gaps.\cb1 \
\cb3 At the top level, reads from the BGM work through a \'93Record Access Control Point (RACP)\'94 characteristic. The code writes to RACP requesting data from the glucose measurement and glucose measurement context characteristics. Given the asynchronous nature of the response from the BLE device, a notification system is used to let the app now when a response has been received. To subscribe to those notifications, the code needs to register for glucose measurement notifications with RACP.\cb1 \
\cb3 Examples of RACP commands (which are sparsely undocumented in the spec and that I had to discover iteratively):\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs27\fsmilli13600 \cf2 \cb5 1,1			Read all records\
4,1			Number of records\
1,6			Read last record received\
1,5			Read first record\
1,3,1,45,0	    Read extract from record 45 onwards\
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \cb3 These are all sent as UInt8 values.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs48 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Code\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 Code is built using Model:View:Controller architecture so the classes are separable for use elsewhere. Given that the code is illustrative, it is bare bones and does not implement much error handling nor a nice UI.\cb1 \
\cb3 The project has Swift 4 classes:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
BLE.swift
\b0  manages the Bluetooth Peripheral\cb1 \
\ls2\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
GlucoseRecord.swift
\b0  manages the data Model\cb1 \
\ls2\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
HealthKitManager.swift
\b0  manages the HealthKit Interface\cb1 \
\ls2\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
ViewController
\b0 \cb1 \
\ls2\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
AppDelegate
\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 AppDelegate\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 Instantiates the Glucose model and passes a handle on to ViewController\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 BLE\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 Manages the process of turning on iPhone Bluetooth, scanning for the BGM, connecting to it, finding its glucose services and associated characteristics. The code should work with any BGM that implements the BLE GATT.\cb1 \
\cb3 Code was developed as a foundational starting point demo, so scanning is tied to 1 glucometer (its UUID is embedded in the code), no UI is implemented in the ViewController, no timeout for not finding a device, minimal error handling etc.\cb1 \
\cb3 Uses a Protocol \'93BLEProtocol\'94 to enable the ViewController to receive notifications as asynchronous tasks such as data reads complete\cb1 \
\cb3 Once connection to the BLE device is set, commands can be issued as an array of UInt8. Commands for glucometer measurement and context are sent to the RACP characteristic.\cb1 \
\cb3 Measurement data back from the BGM is received in an array of 15 UInt8 bytes per the GATT standard and is set out like this: There sometimes then follows a \'93context\'94 message that supplies extra information such as device battery level of a further 4 UInt8\cb1 \
\cb3 Example data looks like this:\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs27\fsmilli13600 \cf2 \cb5 Received update for characteristic 2A18 of value...\
[19, 30, 0, 226, 7, 9, 20, 5, 27, 7, 92, 254, 111, 176, 241]\
Received update for characteristic 2A34 of value...\
[2, 30, 0, 2]\
\
Received update for characteristic 2A52 of value...\
[6, 0, 1, 1]\
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \cb3 Where 0x2A18 is the glucose measurement characteristic, 0x2A34 glucose context and 0x2A52 is RACP Responses generally consist of a series of measurement values each followed by it\'92s corresponding context and finally the RACP packet.\cb1 \
\cb3 The output from the BLE class is a tuple of 2 arrays of UInt8 values; one for glucose measurement and the other for the measurement\'92s context. For example:\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs27\fsmilli13600 \cf2 \cb5 [19, 49, 0, 226, 7, 10, 6, 15, 47, 50, 92, 254, 126, 176, 241], [2, 49, 0, 1]\
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \cb3 A developer test mode is provided in ViewController. Since the IOS simulator does not provide for Bluetooth, this mode is an \'93offline\'94 way of testing the downstream app with example BGM data packets.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Glucose Record\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 Takes raw packets from BLE and provides some basic enumerations to decode measurement states from the Context data. e.g. blood type, sample location, meal present, device status etc\cb1 \
\cb3 Each record consists of:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Sequence number
\b0  Unique number per sample starting from zero.\cb1 \
\ls3\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Base time
\b0  This is set by default to UTC and is sent from BLE as a SInt16\cb1 \
\ls3\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
TimeOffsetMins
\b0  Gives the offset in time between base time UTC and the \'93user facing\'94 time. This is a way to figure out the user\'92s timezone.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Glucose concentration and measurement units\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Blood type, sample location, meal context and device sensor flags\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 No processing of decoded flags has been implemented.\cb1 \
\cb3 The output is written to HealthKit as a floating point mg/dL measurement along with time information.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 HealthKit Manager\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 To get this to work you MUST set up Privacy requests in your App\'92s info.plist as here:\cb1 \
\cb3 First sets up requests to the user to allow the app to read and write glucose records to HealthKit Timezone information is sent through the meta data variables. Seems to decode correctly and allocate the correct timezone to each reading regardless of the iPhone\'92s location}